Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  StackName:
    Description: VPC stack name 
    Type: String
    Default: "network"
  Snsarn:
    Description: SNS arn
    Type: String
    

Mappings: 
  RegionMap: 
  # Paris
    eu-west-3:
      bastion: ami-01c72e187b357583b
      backend: ami-01c72e187b357583b
  # Ireland      
    eu-west-1:
      bastion: ami-0b4b2d87bdd32212a
      backend: ami-0b4b2d87bdd32212a
  # Frankfurt  
    eu-central-1:
      bastion: ami-0e342d72b12109f91
      backend: ami-0e342d72b12109f91
  # London      
    eu-west-2:
      bastion: ami-0eb89db7593b5d434
      backend: ami-0eb89db7593b5d434  # ubuntu
    


Resources:
# user definition 
  User:
    Type: 'AWS::IAM::User'
    Properties:
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 's3:*object'
                Resource: 
                   - 'arn:aws:s3:::jenkinssetup/*'
                   - 'arn:aws:s3:::jenkinscredentionalinit/*'
                  
                    
        - PolicyName: IAMAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                NotAction: 'iam:*'
                Resource: '*'
        - PolicyName: EC2Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'ec2:*'
                Resource: '*'
        - PolicyName: SNSpuplish
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'sns:Publish'
                Resource: 'arn:aws:sns:::*'
  HostKeys:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref User
# Roles definition
  assumebucketRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "s3andSnS"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
           # Principal: 
            Action:
                - 's3:*Object'
                - 's3:List*'
                
            Resource: 
               - 'arn:aws:s3:::jenkinssetup/configurefile/*'
               - 'arn:aws:s3:::jenkinssetup/*'
          - 
            Effect: "Allow"
            Action: 
              - 'sns:Publish'               
            Resource: 
              - !Sub ${Snsarn}
                
      Roles: 
        - 
          Ref: "assumebucketRole"
  
  assingInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "assumebucketRole"


  
  # security group 
  publicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow RDP to Bastion
      VpcId: 
         Fn::ImportValue: !Sub "${StackName}-VPCid"
      SecurityGroupIngress:
          -
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          -
            IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0
            
      SecurityGroupEgress:
          -
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - 
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          -
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 10.10.1.0/24
          -
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 10.10.2.0/24
            
            
            
  
         
  # Bastion
  
  Ec2InstanceBastion: 
    Type: AWS::EC2::Instance
    Properties: 
     ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", bastion]
     InstanceType: 't2.micro'
     KeyName: !Ref KeyName 
     IamInstanceProfile: !Ref assingInstanceProfile
     SubnetId: 
          Fn::ImportValue: !Sub "${StackName}-SubnetPublic"
     SecurityGroupIds:
        -
          !Ref publicSecurityGroup
     Tags:
        - Key: "projekt"
          Value: "pierwszaSiec"
        - Key: "sns"
          Value: !Sub ${Snsarn}
        

     UserData:
      'Fn::Base64':
         !Sub |
         #!/bin/bash
         exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
         sudo yum update -y
         sudo yum install -y java-1.8.0-openjdk.x86_64 
         sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo 
         sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key 
         sudo yum install jenkins -y 
         sudo service jenkins start 
         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
         unzip awscliv2.zip
         sudo ./aws/install
         sudo aws configure set aws_access_key_id ${HostKeys}
         sudo aws configure set aws_secret_access_key ${HostKeys.SecretAccessKey}
         sudo aws configure set default.region ${AWS::Region}
         aws s3 cp s3://jenkinssetup/configurefile/PierwszaSiec.pem /home/ec2-user/PierwszaSiec.pem
         aws s3 cp s3://jenkinssetup/configurefile/PierwszaSiec.ppk /home/ec2-user/PierwszaSiec.ppk
         sleep 360
         sudo cp /var/lib/jenkins/secrets/initialAdminPassword  /tmp/cred.txt 
         cred=$(cat /tmp/cred.txt)
         publicip=$(curl http://169.254.169.254/latest/meta-data/public-ipv4) 
         aws sns publish --topic-arn ${Snsarn} --message " jenkins url http://$publicip:8080  copy and paste credentional $cred  " 
         
         
           
           
  
  
  
# out put


Outputs:
    IPAdressBastoin:
      Description: "Bastion IP Addres"
      Value: !GetAtt   Ec2InstanceBastion.PublicIp
      Export:
        Name: "BastionIPaddress"
      # Description: "Bastion IP Addres"
      # Value: !Ref   Ec2InstanceBastion
      # Export:
      #   Name: 
      #     'Fn::Sub': '${AWS::StackName}-Ec2InstanceBastion.PublicIp'
    publicSecurityGroupid:
      Description: Public security group name
      Value:
        Fn::GetAtt:
          - publicSecurityGroup  
          - GroupId
      Export:
        Name:
          Fn::Sub: '${AWS::StackName}-SecurityGroupID'

   

   